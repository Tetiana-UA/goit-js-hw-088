{"mappings":"YAAO,SAASA,EAASC,EAAKC,GAC5BC,aAAaC,QAAQH,EAAKI,KAAKC,UAAUJ,G,CAEpC,SAASK,EAAWN,GACzB,IAAMO,EAAOL,aAAaM,QAAQR,GAClC,IACE,OAAOI,KAAKK,MAAMF,E,CAClB,MAAAG,GACA,OAAOH,C,ECCX,IAYQI,EACAC,EAbFC,EAAO,CAAEC,SAAUC,SAASC,cAAc,mBAEhDH,EAAKC,SAASG,iBAAiB,SAG/B,SAAqBP,GACnB,IAAMV,EAAMU,EAAEQ,OAAOP,MACfV,EAAQS,EAAEQ,OAAON,QACvBb,EAASC,EAAKC,E,IALhBY,EAAKC,SAASG,iBAAiB,UAiB/B,SAAsBP,GACpBA,EAAES,iBACF,IAAMR,EAAQE,EAAKC,SAASM,SAAST,MAAMV,MACrCW,EAAUC,EAAKC,SAASM,SAASR,QAAQX,MACzCoB,EAAS,CACbV,QACAC,WAEFU,QAAQC,IAAIF,GACZX,EAAEc,OAAOC,QACTvB,aAAawB,WAAW,SACxBxB,aAAawB,WAAW,U,IAnBlBf,EAAQL,EAAW,SACnBM,EAAUN,EAAW,WAE3BO,EAAKC,SAASM,SAAST,MAAMV,MAAQU,EACrCE,EAAKC,SAASM,SAASR,QAAUA,C","sources":["src/js/helpers.js","src/js/03-feedback.js"],"sourcesContent":["export function saveToLS(key, value) {\n  localStorage.setItem(key, JSON.stringify(value));\n}\nexport function loadFromLS(key) {\n  const data = localStorage.getItem(key);\n  try {\n    return JSON.parse(data);\n  } catch {\n    return data;\n  }\n}\n\n//const feedback-form-state ={\n// email:email.value\n// message:message.value}\n\n//export function saveToLS(feedback-form-state ) {\n//  localStorage.setItem(\"feedback-form-state\", JSON.stringify(feedback-form-state));}\n//\n","//HTML містить розмітку форми. Напиши скрипт, який буде зберігати значення полів у локальне сховище, коли користувач щось друкує.\n\n//    Відстежуй на формі подію input, і щоразу записуй у локальне сховище об'єкт з полями email і message, у яких зберігай поточні значення полів форми. Нехай ключем для сховища буде рядок \"feedback-form-state\".\n//   Під час завантаження сторінки перевіряй стан сховища, і якщо там є збережені дані, заповнюй ними поля форми. В іншому випадку поля повинні бути порожніми.\n//    Під час сабміту форми очищуй сховище і поля форми, а також виводь у консоль об'єкт з полями email, message та їхніми поточними значеннями.\n//    Зроби так, щоб сховище оновлювалось не частіше, ніж раз на 500 мілісекунд. Для цього додай до проекту і використовуй бібліотеку lodash.throttle.\n\nimport { saveToLS, loadFromLS } from './helpers';\n\nconst refs = { formElem: document.querySelector('.feedback-form') };\n\nrefs.formElem.addEventListener('input', onFormInput);\nrefs.formElem.addEventListener('submit', onFormSubmit);\n\nfunction onFormInput(e) {\n  const key = e.target.email;\n  const value = e.target.message;\n  saveToLS(key, value);\n}\n\nfunction onLoad() {\n  const email = loadFromLS('email');\n  const message = loadFromLS('message');\n\n  refs.formElem.elements.email.value = email;\n  refs.formElem.elements.message = message;\n}\nonLoad();\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n  const email = refs.formElem.elements.email.value;\n  const message = refs.formElem.elements.message.value;\n  const object = {\n    email,\n    message,\n  };\n  console.log(object);\n  e.Target.reset();\n  localStorage.removeItem('email');\n  localStorage.removeItem('message');\n}\n"],"names":["$77eae7726dbdfc03$export$53c15ea6e761c354","key","value","localStorage","setItem","JSON","stringify","$77eae7726dbdfc03$export$6ffe6b83d6e92153","data","getItem","parse","e","email","message","$b00c40859be242c5$var$refs","formElem","document","querySelector","addEventListener","target","preventDefault","elements","object","console","log","Target","reset","removeItem"],"version":3,"file":"03-feedback.4de98141.js.map"}